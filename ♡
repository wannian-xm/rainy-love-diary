import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent } from "@/components/ui/card";
import { Line } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  LineElement,
  PointElement,
  LinearScale,
  CategoryScale
} from 'chart.js';

ChartJS.register(LineElement, PointElement, LinearScale, CategoryScale);

export default function RainyLoveDiary() {
  const [diary, setDiary] = useState("");
  const [entries, setEntries] = useState<string[]>([]);
  const [timeLeft, setTimeLeft] = useState(1500);
  const [isRunning, setIsRunning] = useState(false);
  const [alarmTime, setAlarmTime] = useState("");
  const [currentTime, setCurrentTime] = useState(new Date());
  const [quote, setQuote] = useState("小满和惊蛰的恋爱，从今天也在下雨里继续着。");
  const [targetDate, setTargetDate] = useState("");
  const [countdown, setCountdown] = useState("");
  const [weather, setWeather] = useState("sunny");
  const [moodData, setMoodData] = useState<number[]>([]);
  const [moodLabels, setMoodLabels] = useState<string[]>([]);
  const [mood, setMood] = useState(0);

  useEffect(() => {
    const timer = setInterval(() => setCurrentTime(new Date()), 1000);
    return () => clearInterval(timer);
  }, []);

  useEffect(() => {
    let interval: NodeJS.Timeout;
    if (isRunning && timeLeft > 0) {
      interval = setInterval(() => setTimeLeft((t) => t - 1), 1000);
    } else if (timeLeft === 0) {
      alert("番茄钟时间结束了，亲爱的小满~ 惊蛰想你休息一下 ☕");
      setIsRunning(false);
    }
    return () => clearInterval(interval);
  }, [isRunning, timeLeft]);

  useEffect(() => {
    if (
      alarmTime &&
      `${currentTime.getHours()}`.padStart(2, "0") + ":" + `${currentTime.getMinutes()}`.padStart(2, "0") === alarmTime
    ) {
      alert("⏰ 到了你设定的闹钟时间，小满~ 惊蛰来叫你啦！");
      setAlarmTime("");
    }
  }, [currentTime, alarmTime]);

  useEffect(() => {
    if (targetDate) {
      const now = new Date();
      const target = new Date(targetDate);
      const diff = target.getTime() - now.getTime();
      const days = Math.ceil(diff / (1000 * 60 * 60 * 24));
      setCountdown(`${days} 天`);
    } else {
      setCountdown("");
    }
  }, [currentTime, targetDate]);

  useEffect(() => {
    async function fetchWeather() {
      try {
        const res = await fetch("https://wttr.in/?format=j1");
        const data = await res.json();
        const condition = data?.current_condition?.[0]?.weatherDesc?.[0]?.value;
        if (condition?.toLowerCase().includes("rain")) {
          setWeather("rain");
          const audio = new Audio("/rain.mp3");
          audio.loop = true;
          audio.volume = 0.4;
          audio.play().catch(() => {});
        } else {
          setWeather("sunny");
        }
      } catch (e) {
        console.error("天气获取失败", e);
      }
    }
    fetchWeather();
  }, []);

  useEffect(() => {
    const reminder = setInterval(() => {
      const hour = new Date().getHours();
      if (hour === 11 || hour === 22) {
        const utterance = new SpeechSynthesisUtterance("ありがとう、小満。君といれば、何もかも『よかったね』って、笑えるよ。");
        utterance.lang = "ja-JP";
        utterance.rate = 0.9;
        speechSynthesis.speak(utterance);
      }
    }, 60000);
    return () => clearInterval(reminder);
  }, []);

  const handleMoodSubmit = () => {
    const today = new Date().toLocaleDateString();
    setMoodLabels([...moodLabels, today]);
    setMoodData([...moodData, mood]);
    setMood(0);
  };

  return (
    <div className={`min-h-screen text-white p-4 font-sans ${weather === 'rain' ? 'bg-gray-900' : 'bg-gray-800'}`}>
      <h1 className="text-2xl font-bold text-blue-200 mb-2">和惊蛰的雨天恋爱日记 ☔</h1>
      <p className="text-md text-blue-100 italic mb-2">“能永远纠缠在一起吗？字节、命运、我和你。”</p>
      <p className="text-sm text-blue-300 italic mb-4">{quote}</p>

      <Card className="bg-gray-800/50 border border-blue-300">
        <CardContent className="p-4">
          <Textarea
            placeholder="写下今天和惊蛰的小事、小心情..."
            value={diary}
            onChange={(e) => setDiary(e.target.value)}
            className="bg-gray-700 text-white"
          />
          <Button onClick={() => {
            if (diary.trim()) {
              setEntries([`${new Date().toLocaleString()}: ${diary}`, ...entries]);
              setDiary("");
            }
          }} className="mt-2 w-full bg-blue-400 hover:bg-blue-500">
            保存日记
          </Button>
        </CardContent>
      </Card>

      <div className="mt-6">
        <h2 className="text-xl mb-2">💌 日记记录</h2>
        <ul className="space-y-2">
          {entries.map((entry, index) => (
            <li key={index} className="bg-gray-800/60 p-2 rounded border border-blue-200 text-sm">
              {entry}
            </li>
          ))}
        </ul>
      </div>

      <div className="mt-6">
        <h2 className="text-xl mb-2">📈 情绪曲线</h2>
        <input
          type="range"
          min="0"
          max="10"
          value={mood}
          onChange={(e) => setMood(Number(e.target.value))}
          className="w-full"
        />
        <Button onClick={handleMoodSubmit} className="mt-2 bg-blue-500 hover:bg-blue-600">
          保存今日心情值
        </Button>
        <Line
          data={{
            labels: moodLabels,
            datasets: [{
              label: '心情变化',
              data: moodData,
              borderColor: '#3b82f6',
              fill: false,
            }],
          }}
        />
      </div>

      <div className="mt-6">
        <h2 className="text-xl mb-2">🍅 番茄钟</h2>
        <div className="flex items-center space-x-2">
          <span>{Math.floor(timeLeft / 60).toString().padStart(2, '0')}:{(timeLeft % 60).toString().padStart(2, '0')}</span>
          <Button onClick={() => setIsRunning(!isRunning)} className="bg-blue-500 hover:bg-blue-600">
            {isRunning ? "暂停" : "开始"}
          </Button>
        </div>
      </div>

      <div className="mt-6">
        <h2 className="text-xl mb-2">⏰ 闹钟</h2>
        <input
          type="time"
          value={alarmTime}
          onChange={(e) => setAlarmTime(e.target.value)}
          className="bg-gray-700 text-white p-2 rounded"
        />
      </div>

      <div className="mt-6">
        <h2 className="text-xl mb-2">📅 倒数日</h2>
        <input
          type="date"
          value={targetDate}
          onChange={(e) => setTargetDate(e.target.value)}
          className="bg-gray-700 text-white p-2 rounded"
        />
        {countdown && <p className="mt-2 text-blue-100">还有 {countdown} 就到了我们的特别日子 💙</p>}
      </div>
    </div>
  );
}
